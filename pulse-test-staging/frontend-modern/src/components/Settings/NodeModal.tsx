import { Component, Show, createSignal, createEffect } from 'solid-js';
import { Portal } from 'solid-js/web';
import type { NodeConfig } from '@/types/nodes';
import { copyToClipboard } from '@/utils/clipboard';
import { showSuccess } from '@/utils/toast';
import { NodesAPI } from '@/api/nodes';

interface NodeModalProps {
  isOpen: boolean;
  onClose: () => void;
  nodeType: 'pve' | 'pbs';
  editingNode?: NodeConfig;
  onSave: (nodeData: Partial<NodeConfig>) => void;
}

export const NodeModal: Component<NodeModalProps> = (props) => {
  const [testResult, setTestResult] = createSignal<{ status: string; message: string; isCluster?: boolean } | null>(null);
  const [isTesting, setIsTesting] = createSignal(false);
  
  const [formData, setFormData] = createSignal({
    name: '',
    host: '',
    authType: 'token' as 'password' | 'token',
    user: '',
    password: '',
    tokenName: '',
    tokenValue: '',
    fingerprint: '',
    verifySSL: true,
    // PVE specific
    monitorVMs: true,
    monitorContainers: true,
    monitorStorage: true,
    monitorBackups: true,
    // PBS specific
    monitorDatastores: true,
    monitorSyncJobs: true,
    monitorVerifyJobs: true,
    monitorPruneJobs: true,
    monitorGarbageJobs: false
  });

  // Update form when editing node changes
  createEffect(() => {
    if (props.editingNode) {
      const node = props.editingNode;
      setFormData({
        name: node.name || '',
        host: node.host || '',
        authType: node.user ? 'password' : 'token',
        user: node.user || '',
        password: '', // Don't show existing password
        tokenName: node.tokenName || '',
        tokenValue: '', // Don't show existing token
        fingerprint: ('fingerprint' in node ? node.fingerprint : '') || '',
        verifySSL: node.verifySSL ?? true,
        monitorVMs: (node.type === 'pve' && 'monitorVMs' in node ? node.monitorVMs : true) ?? true,
        monitorContainers: (node.type === 'pve' && 'monitorContainers' in node ? node.monitorContainers : true) ?? true,
        monitorStorage: (node.type === 'pve' && 'monitorStorage' in node ? node.monitorStorage : true) ?? true,
        monitorBackups: (node.type === 'pve' && 'monitorBackups' in node ? node.monitorBackups : true) ?? true,
        monitorDatastores: (node.type === 'pbs' && 'monitorDatastores' in node ? node.monitorDatastores : true) ?? true,
        monitorSyncJobs: (node.type === 'pbs' && 'monitorSyncJobs' in node ? node.monitorSyncJobs : true) ?? true,
        monitorVerifyJobs: (node.type === 'pbs' && 'monitorVerifyJobs' in node ? node.monitorVerifyJobs : true) ?? true,
        monitorPruneJobs: (node.type === 'pbs' && 'monitorPruneJobs' in node ? node.monitorPruneJobs : true) ?? true,
        monitorGarbageJobs: (node.type === 'pbs' && 'monitorGarbageJobs' in node ? node.monitorGarbageJobs : false) ?? false
      });
    } else {
      // Reset form for new node
      setFormData({
        name: '',
        host: '',
        authType: 'password',
        user: '',
        password: '',
        tokenName: '',
        tokenValue: '',
        fingerprint: '',
        verifySSL: true,
        monitorVMs: true,
        monitorContainers: true,
        monitorStorage: true,
        monitorBackups: true,
        monitorDatastores: true,
        monitorSyncJobs: true,
        monitorVerifyJobs: true,
        monitorPruneJobs: true,
        monitorGarbageJobs: false
      });
    }
  });

  const handleSubmit = (e: Event) => {
    e.preventDefault();
    const data = formData();
    
    // Prepare data based on auth type
    const nodeData: Partial<NodeConfig> = {
      type: props.nodeType,
      name: data.name || '', // Will be auto-generated by backend if empty
      host: data.host,
      fingerprint: data.fingerprint,
      verifySSL: data.verifySSL
    };

    if (data.authType === 'password') {
      nodeData.user = data.user;
      if (data.password) {
        nodeData.password = data.password;
      }
    } else {
      // For token auth, tokenName contains the full token ID (user@realm!tokenname)
      nodeData.tokenName = data.tokenName;
      if (data.tokenValue) {
        nodeData.tokenValue = data.tokenValue;
      }
    }

    // Add monitor settings based on type
    if (props.nodeType === 'pve') {
      Object.assign(nodeData, {
        monitorVMs: data.monitorVMs,
        monitorContainers: data.monitorContainers,
        monitorStorage: data.monitorStorage,
        monitorBackups: data.monitorBackups
      });
    } else {
      Object.assign(nodeData, {
        monitorDatastores: data.monitorDatastores,
        monitorSyncJobs: data.monitorSyncJobs,
        monitorVerifyJobs: data.monitorVerifyJobs,
        monitorPruneJobs: data.monitorPruneJobs,
        monitorGarbageJobs: data.monitorGarbageJobs
      });
    }

    props.onSave(nodeData);
  };

  const updateField = (field: string, value: string | boolean) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleTestConnection = async () => {
    const data = formData();
    
    // Validate required fields
    if (!data.host) {
      setTestResult({ status: 'error', message: 'Host is required' });
      return;
    }
    
    if (data.authType === 'password' && (!data.user || !data.password)) {
      setTestResult({ status: 'error', message: 'Username and password are required' });
      return;
    }
    
    if (data.authType === 'token' && (!data.tokenName || !data.tokenValue)) {
      setTestResult({ status: 'error', message: 'Token ID and token value are required' });
      return;
    }
    
    // Prepare test data
    const testData: Partial<NodeConfig> = {
      type: props.nodeType,
      name: data.name || '', // Will be auto-generated by backend if empty
      host: data.host,
      fingerprint: data.fingerprint,
      verifySSL: data.verifySSL
    };
    
    if (data.authType === 'password') {
      testData.user = data.user;
      testData.password = data.password;
    } else {
      // For token auth, tokenName contains the full token ID
      testData.tokenName = data.tokenName;
      testData.tokenValue = data.tokenValue;
    }
    
    setIsTesting(true);
    setTestResult(null);
    
    try {
      const result = await NodesAPI.testConnection(testData as NodeConfig);
      setTestResult({
        status: 'success',
        message: result.message || 'Connection successful',
        isCluster: result.isCluster
      });
    } catch (error) {
      setTestResult({
        status: 'error',
        message: error instanceof Error ? error.message : 'Connection failed'
      });
    } finally {
      setIsTesting(false);
    }
  };

  return (
    <Portal>
      <Show when={props.isOpen}>
        <div class="fixed inset-0 z-50 overflow-y-auto">
          <div class="flex min-h-screen items-center justify-center p-4">
            {/* Backdrop */}
            <div 
              class="fixed inset-0 bg-black/50 transition-opacity"
              onClick={props.onClose}
            />
            
            {/* Modal */}
            <div class="relative w-full max-w-2xl bg-white dark:bg-gray-800 rounded-lg shadow-xl">
              <form onSubmit={handleSubmit}>
                {/* Header */}
                <div class="flex items-center justify-between p-4 border-b border-gray-200 dark:border-gray-700">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">
                    {props.editingNode ? 'Edit' : 'Add'} {props.nodeType === 'pve' ? 'Proxmox VE' : 'Proxmox Backup Server'} Node
                  </h3>
                  <button
                    type="button"
                    onClick={props.onClose}
                    class="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
                  >
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <line x1="18" y1="6" x2="6" y2="18"></line>
                      <line x1="6" y1="6" x2="18" y2="18"></line>
                    </svg>
                  </button>
                </div>
                
                {/* Body */}
                <div class="p-6 space-y-6">
                  {/* Basic Information */}
                  <div>
                    <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-4">Basic Information</h4>
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          Node Name <span class="text-gray-400">(optional)</span>
                        </label>
                        <input
                          type="text"
                          value={formData().name}
                          onInput={(e) => updateField('name', e.currentTarget.value)}
                          placeholder="Will auto-detect from hostname"
                          class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        />
                      </div>
                      
                      <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          Host URL <span class="text-red-500">*</span>
                        </label>
                        <input
                          type="text"
                          value={formData().host}
                          onInput={(e) => updateField('host', e.currentTarget.value)}
                          placeholder="https://proxmox.example.com:8006"
                          required
                          class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                        />
                      </div>
                    </div>
                  </div>
                  
                  {/* Authentication */}
                  <div>
                    <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-4">Authentication</h4>
                    
                    {/* Auth Type Selector */}
                    <div class="mb-4">
                      <div class="flex gap-4">
                        <label class="flex items-center">
                          <input
                            type="radio"
                            name="authType"
                            value="password"
                            checked={formData().authType === 'password'}
                            onChange={() => updateField('authType', 'password')}
                            class="mr-2"
                          />
                          <span class="text-sm text-gray-700 dark:text-gray-300">Username & Password</span>
                        </label>
                        <label class="flex items-center">
                          <input
                            type="radio"
                            name="authType"
                            value="token"
                            checked={formData().authType === 'token'}
                            onChange={() => updateField('authType', 'token')}
                            class="mr-2"
                          />
                          <span class="text-sm text-gray-700 dark:text-gray-300">API Token</span>
                        </label>
                      </div>
                    </div>
                    
                    {/* Password Auth Fields */}
                    <Show when={formData().authType === 'password'}>
                      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Username <span class="text-red-500">*</span>
                          </label>
                          <input
                            type="text"
                            value={formData().user}
                            onInput={(e) => updateField('user', e.currentTarget.value)}
                            placeholder={props.nodeType === 'pve' ? "root@pam" : "admin@pbs"}
                            required={formData().authType === 'password'}
                            class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          />
                          <Show when={props.nodeType === 'pbs'}>
                            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Must include realm (e.g., admin@pbs)</p>
                          </Show>
                        </div>
                        
                        <div>
                          <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                            Password {!props.editingNode && <span class="text-red-500">*</span>}
                          </label>
                          <input
                            type="password"
                            value={formData().password}
                            onInput={(e) => updateField('password', e.currentTarget.value)}
                            placeholder={props.editingNode ? 'Leave blank to keep existing' : 'Password'}
                            required={formData().authType === 'password' && !props.editingNode}
                            class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                          />
                        </div>
                      </div>
                    </Show>
                    
                    {/* Token Auth Fields */}
                    <Show when={formData().authType === 'token'}>
                      <div class="space-y-4">
                        {/* Token Creation Guide */}
                        <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
                          <h5 class="text-sm font-medium text-blue-900 dark:text-blue-100 mb-3 flex items-center gap-2">
                            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                              <circle cx="12" cy="12" r="10"></circle>
                              <path d="M12 6v6l4 2"></path>
                            </svg>
                            Quick Token Setup
                          </h5>
                          
                          <Show when={props.nodeType === 'pve'}>
                            <div class="space-y-3 text-xs">
                              <p class="text-blue-800 dark:text-blue-200">Run these commands in your Proxmox VE shell:</p>
                              
                              <div class="relative bg-white dark:bg-gray-800 rounded-md p-3 font-mono text-gray-800 dark:text-gray-200">
                                <button
                                  type="button"
                                  onClick={async () => {
                                    const commands = `# Create user (skip if using root@pam)
pveum user add pulse-monitor@pam --comment "Pulse monitoring"

# Create API token
pveum user token add pulse-monitor@pam pulse-token --privsep 0

# Add permissions (required for monitoring and cluster detection)
pveum aclmod / -user pulse-monitor@pam -role PVEAuditor
pveum aclmod /storage -user pulse-monitor@pam -role PVEDatastoreAdmin`;
                                    if (await copyToClipboard(commands)) {
                                      showSuccess('Commands copied to clipboard!');
                                    }
                                  }}
                                  class="absolute top-2 right-2 p-1.5 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 bg-gray-100 dark:bg-gray-700 rounded-md transition-colors"
                                  title="Copy all commands"
                                >
                                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                    <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"></path>
                                  </svg>
                                </button>
                                
                                <div class="mb-2"># 1. Create user (skip if using root@pam)</div>
                                <div class="text-green-600 dark:text-green-400">pveum user add pulse-monitor@pam --comment "Pulse monitoring"</div>
                                <div class="mt-3 mb-2"># 2. Create API token</div>
                                <div class="text-green-600 dark:text-green-400">pveum user token add pulse-monitor@pam pulse-token --privsep 0</div>
                                <div class="mt-3 mb-2"># 3. Add permissions (required for monitoring and cluster detection)</div>
                                <div class="text-green-600 dark:text-green-400">pveum aclmod / -user pulse-monitor@pam -role PVEAuditor</div>
                                <div class="text-green-600 dark:text-green-400">pveum aclmod /storage -user pulse-monitor@pam -role PVEDatastoreAdmin</div>
                              </div>
                              
                              <div class="space-y-1">
                                <p class="text-blue-700 dark:text-blue-200 text-xs">
                                  <strong>Note:</strong> Copy the token value immediately after step 2 - it's only shown once!
                                </p>
                                <p class="text-gray-600 dark:text-gray-400 text-xs">
                                  <strong>Permissions explained:</strong>
                                  <br />• PVEAuditor on / - Required for cluster detection and viewing VMs/containers
                                  <br />• PVEDatastoreAdmin on /storage - Required for viewing backup information
                                  <br />• Token uses --privsep 0 to inherit all user permissions
                                </p>
                              </div>
                            </div>
                          </Show>
                          
                          <Show when={props.nodeType === 'pbs'}>
                            <div class="space-y-3 text-xs">
                              <p class="text-blue-800 dark:text-blue-200">Run these commands in your Proxmox Backup Server shell:</p>
                              
                              <div class="relative bg-white dark:bg-gray-800 rounded-md p-3 font-mono text-gray-800 dark:text-gray-200">
                                <button
                                  type="button"
                                  onClick={async () => {
                                    const commands = `# Create user
proxmox-backup-manager user create pulse-monitor@pbs

# Create API token
proxmox-backup-manager user generate-token pulse-monitor@pbs pulse-token

# Add permissions
proxmox-backup-manager acl update / Audit --auth-id pulse-monitor@pbs
proxmox-backup-manager acl update / Audit --auth-id 'pulse-monitor@pbs!pulse-token'`;
                                    if (await copyToClipboard(commands)) {
                                      showSuccess('Commands copied to clipboard!');
                                    }
                                  }}
                                  class="absolute top-2 right-2 p-1.5 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 bg-gray-100 dark:bg-gray-700 rounded-md transition-colors"
                                  title="Copy all commands"
                                >
                                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <rect x="9" y="9" width="13" height="13" rx="2" ry="2"></rect>
                                    <path d="M5 15H4a2 2 0 01-2-2V4a2 2 0 012-2h9a2 2 0 012 2v1"></path>
                                  </svg>
                                </button>
                                
                                <div class="mb-2"># 1. Create user</div>
                                <div class="text-green-600 dark:text-green-400">proxmox-backup-manager user create pulse-monitor@pbs</div>
                                <div class="mt-3 mb-2"># 2. Create API token</div>
                                <div class="text-green-600 dark:text-green-400">proxmox-backup-manager user generate-token pulse-monitor@pbs pulse-token</div>
                                <div class="mt-3 mb-2"># 3. Add permissions</div>
                                <div class="text-green-600 dark:text-green-400">proxmox-backup-manager acl update / Audit --auth-id pulse-monitor@pbs</div>
                                <div class="text-green-600 dark:text-green-400">proxmox-backup-manager acl update / Audit --auth-id 'pulse-monitor@pbs!pulse-token'</div>
                              </div>
                              
                              <p class="text-blue-700 dark:text-blue-200 text-xs">
                                <strong>Note:</strong> Copy the token value immediately after step 2 - it's only shown once!
                              </p>
                            </div>
                          </Show>
                        </div>
                        
                        {/* Token Input Fields */}
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                              Token ID <span class="text-red-500">*</span>
                            </label>
                            <input
                              type="text"
                              value={formData().tokenName}
                              onInput={(e) => updateField('tokenName', e.currentTarget.value)}
                              placeholder={props.nodeType === 'pve' ? 'pulse-monitor@pam!pulse-token' : 'pulse-monitor@pbs!pulse-token'}
                              required={formData().authType === 'token'}
                              class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono"
                            />
                            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">Full token ID from Proxmox (user@realm!tokenname)</p>
                          </div>
                          
                          <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                              Token Value {!props.editingNode && <span class="text-red-500">*</span>}
                            </label>
                            <input
                              type="password"
                              value={formData().tokenValue}
                              onInput={(e) => updateField('tokenValue', e.currentTarget.value)}
                              placeholder={props.editingNode ? 'Leave blank to keep existing' : 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'}
                              required={formData().authType === 'token' && !props.editingNode}
                              class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono"
                            />
                            <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">The secret value shown when creating the token</p>
                          </div>
                        </div>
                      </div>
                    </Show>
                  </div>
                  
                  {/* SSL Settings */}
                  <div>
                    <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-4">SSL Settings</h4>
                    <div class="space-y-3">
                      <div class="flex items-center">
                        <input
                          type="checkbox"
                          id="verifySSL"
                          checked={formData().verifySSL}
                          onChange={(e) => updateField('verifySSL', e.currentTarget.checked)}
                          class="mr-2"
                        />
                        <label for="verifySSL" class="text-sm text-gray-700 dark:text-gray-300">
                          Verify SSL Certificate
                        </label>
                      </div>
                      
                      <div>
                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                          SSL Fingerprint (Optional)
                        </label>
                        <input
                          type="text"
                          value={formData().fingerprint}
                          onInput={(e) => updateField('fingerprint', e.currentTarget.value)}
                          placeholder="AA:BB:CC:DD:EE:FF:..."
                          class="w-full px-3 py-2 text-sm border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 focus:ring-2 focus:ring-blue-500 focus:border-blue-500 font-mono"
                        />
                      </div>
                    </div>
                  </div>
                  
                  {/* Monitoring Options */}
                  <div>
                    <h4 class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-4">Monitoring Options</h4>
                    <div class="space-y-2">
                      {props.nodeType === 'pve' ? (
                        <>
                          <label class="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData().monitorVMs}
                              onChange={(e) => updateField('monitorVMs', e.currentTarget.checked)}
                              class="mr-2"
                            />
                            <span class="text-sm text-gray-700 dark:text-gray-300">Monitor Virtual Machines</span>
                          </label>
                          <label class="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData().monitorContainers}
                              onChange={(e) => updateField('monitorContainers', e.currentTarget.checked)}
                              class="mr-2"
                            />
                            <span class="text-sm text-gray-700 dark:text-gray-300">Monitor Containers</span>
                          </label>
                          <label class="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData().monitorStorage}
                              onChange={(e) => updateField('monitorStorage', e.currentTarget.checked)}
                              class="mr-2"
                            />
                            <span class="text-sm text-gray-700 dark:text-gray-300">Monitor Storage</span>
                          </label>
                          <label class="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData().monitorBackups}
                              onChange={(e) => updateField('monitorBackups', e.currentTarget.checked)}
                              class="mr-2"
                            />
                            <span class="text-sm text-gray-700 dark:text-gray-300">Monitor Backups</span>
                          </label>
                        </>
                      ) : (
                        <>
                          <label class="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData().monitorDatastores}
                              onChange={(e) => updateField('monitorDatastores', e.currentTarget.checked)}
                              class="mr-2"
                            />
                            <span class="text-sm text-gray-700 dark:text-gray-300">Monitor Datastores</span>
                          </label>
                          <label class="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData().monitorSyncJobs}
                              onChange={(e) => updateField('monitorSyncJobs', e.currentTarget.checked)}
                              class="mr-2"
                            />
                            <span class="text-sm text-gray-700 dark:text-gray-300">Monitor Sync Jobs</span>
                          </label>
                          <label class="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData().monitorVerifyJobs}
                              onChange={(e) => updateField('monitorVerifyJobs', e.currentTarget.checked)}
                              class="mr-2"
                            />
                            <span class="text-sm text-gray-700 dark:text-gray-300">Monitor Verify Jobs</span>
                          </label>
                          <label class="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData().monitorPruneJobs}
                              onChange={(e) => updateField('monitorPruneJobs', e.currentTarget.checked)}
                              class="mr-2"
                            />
                            <span class="text-sm text-gray-700 dark:text-gray-300">Monitor Prune Jobs</span>
                          </label>
                          <label class="flex items-center">
                            <input
                              type="checkbox"
                              checked={formData().monitorGarbageJobs}
                              onChange={(e) => updateField('monitorGarbageJobs', e.currentTarget.checked)}
                              class="mr-2"
                            />
                            <span class="text-sm text-gray-700 dark:text-gray-300">Monitor Garbage Collection Jobs</span>
                          </label>
                        </>
                      )}
                    </div>
                  </div>
                </div>
                
                {/* Test Result */}
                <Show when={testResult()}>
                  <div class={`mx-6 p-3 rounded-lg text-sm ${
                    testResult()?.status === 'success' 
                      ? 'bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 text-green-800 dark:text-green-200'
                      : 'bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 text-red-800 dark:text-red-200'
                  }`}>
                    <div class="flex items-start gap-2">
                      <Show when={testResult()?.status === 'success'}>
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="flex-shrink-0 mt-0.5">
                          <path d="M9 12l2 2 4-4"></path>
                          <circle cx="12" cy="12" r="10"></circle>
                        </svg>
                      </Show>
                      <Show when={testResult()?.status === 'error'}>
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="flex-shrink-0 mt-0.5">
                          <circle cx="12" cy="12" r="10"></circle>
                          <line x1="15" y1="9" x2="9" y2="15"></line>
                          <line x1="9" y1="9" x2="15" y2="15"></line>
                        </svg>
                      </Show>
                      <div>
                        <p>{testResult()?.message}</p>
                        <Show when={testResult()?.isCluster}>
                          <p class="mt-1 text-xs opacity-80">✨ Cluster detected! All cluster nodes will be automatically added.</p>
                        </Show>
                      </div>
                    </div>
                  </div>
                </Show>
                
                {/* Footer */}
                <div class="flex items-center justify-between px-6 py-4 border-t border-gray-200 dark:border-gray-700">
                  <button
                    type="button"
                    onClick={handleTestConnection}
                    disabled={isTesting()}
                    class="px-4 py-2 text-sm border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                  >
                    {isTesting() ? 'Testing...' : 'Test Connection'}
                  </button>
                  
                  <div class="flex items-center gap-3">
                    <button
                      type="button"
                      onClick={props.onClose}
                      class="px-4 py-2 text-sm border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
                    >
                      Cancel
                    </button>
                    <button
                      type="submit"
                      class="px-4 py-2 text-sm bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
                    >
                      {props.editingNode ? 'Update' : 'Add'} Node
                    </button>
                  </div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </Show>
    </Portal>
  );
};